#pragma kernel PreSnycInit
#pragma kernel PreSnycUpdate

#include "UnityCG.cginc"

struct Firefly
{
    float3 pos;
    float3 vel;
    float4 col;
    float brightness;
    float scale;
};

RWStructuredBuffer<Firefly> FireflyBuffer;

float2 inputPos;
float deltaTime;
int randomSeed;

// randomization from Keijiro
float Random(float u, float v)
{
    float f = dot(float2(12.9898, 78.233), float2(u, v)) + randomSeed;
    return frac(43758.5453 * sin(f));
}

float3 RandomPoint(float id)
{
    float u = Random(id * 0.01334, 0.3728);
    float z = Random(0.8372, id * 0.01197);
    float l = Random(4.438, id * 0.01938 - 4.378);
    return float3(u, z, l);
}

[numthreads(64, 1, 1)]
void PreSnycInit(uint id : SV_DispatchThreadID)
{
    // init position
    FireflyBuffer[id.x].pos = RandomPoint(id);
    FireflyBuffer[id.x].col = float4(RandomPoint(id + 0.5).x, RandomPoint(id + 0.5).x, RandomPoint(id + 0.5).x, 1);
    FireflyBuffer[id.x].vel = float3(0, 0, 0);
    FireflyBuffer[id.x].brightness = Random(id, 0.01197);
    FireflyBuffer[id.x].scale = Random(id, 0.432349);
}

[numthreads(64, 1, 1)]
void PreSnycUpdate(uint id : SV_DispatchThreadID) 
{
    float3 dist = float3(inputPos, 3) - FireflyBuffer[id.x].pos;
    float3 dir = normalize(dist);
    FireflyBuffer[id.x].vel += dir;
    FireflyBuffer[id.x].pos += FireflyBuffer[id.x].vel * deltaTime;
}