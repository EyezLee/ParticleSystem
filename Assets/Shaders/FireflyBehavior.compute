#pragma kernel FireflyInit
#pragma kernel FireflyUpdate
#pragma kernel SyncReset
#pragma kernel SyncUpdate

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"

struct Firefly
{
    float4 pos;
    float4 vel;
    float4 col;
    float phase;
    float scale;
};

RWStructuredBuffer<Firefly> FireflyBuffer;
float2 inputPos;
float deltaTime;
float time;
int randomSeed;
float stepWidth, spread;
float noiseFrequency, noiseOffset;
float freq, freqOffset;
uint fireflyCount;

// karumoto model properties
float coupling, couplingRange;
const float toRadian, normRadian;
float shineSpeed, shineRange;

// boundry setting
int4 boundBox;

// randomization from Keijiro
float Random(float u, float v)
{
    float f = dot(float2(12.9898, 78.233), float2(u, v)) + randomSeed;
    return frac(43758.5453 * sin(f)) - 0.5;
}

float3 RandomPoint(float id)
{
    float u = Random(id * 0.01334, 0.3728);
    float z = Random(0.8372, id * 0.01197);
    float l = Random(4.438, id * 0.01938 - 4.378);
    return float3(u, z, l);
}

[numthreads(256, 1, 1)]
void FireflyInit(uint id : SV_DispatchThreadID)
{
     //scale position to fit screen
    float4 position = float4(RandomPoint((float)id.x), 0);
    position.x *= (boundBox.y - boundBox.x);
    position.y *= (boundBox.w - boundBox.z);
    FireflyBuffer[id.x].pos = position;
    FireflyBuffer[id.x].col = float4(1, 1, 1, 1);
    FireflyBuffer[id.x].vel = float4(0, 0, 0, 0);
    FireflyBuffer[id.x].phase = (Random(id.x, id.x + 0.1) + 0.5) * 10; // shift life
    FireflyBuffer[id.x].scale = max(0.1, (Random(id.x + 123.456, id.x +45.233) + 0.5) * 0.2);
}

[numthreads(256, 1, 1)]
void FireflyUpdate(uint id : SV_DispatchThreadID) 
{
    float4 p = FireflyBuffer[id.x].pos; // origin pos 
    float3 seed = abs(p)+ float3(time, time, time); // prevent 0 velocity which will stuck particles
    // divergence-free noise field
    float4 sn1 = snoise(seed * noiseFrequency);
    float4 sn2 = snoise(noiseOffset - seed * noiseFrequency);
    float3 randForce = normalize(cross(sn1.xyz, sn2.xyz)) * stepWidth;
    // interaction force
    float3 dir = float3(inputPos, p.z) - p;
    // noise force with influced by player
    float3 randVel = 1 / length(dir) * randForce + randForce;
    // main trail -- sin wave-ish
    //float diverseXZ = (Random(id.x, id.x + 134.45) + 0.5) * 5;
    float3 velXZ = normalize(cross(float3(sin(time), 0, cos(time)), float3(0, 1, 0)));
    velXZ.x += normalize(snoise(id)).x;
    //float diverseY = snoise(id.xyy).y;
    float3 velY = float3(0, sin(freq * time) * pow(sin(freqOffset * time), 6), 0) * normalize(snoise(p).xyz);
    // calculate velocity
    FireflyBuffer[id.x].vel = float4(velY + velXZ + randVel, 0);
    // set boundry
    /*float safeStep = stepWidth * 2;
    if (p.x > boundBox.x && p.x < boundBox.y && p.y > boundBox.z && p.y < boundBox.w)
        FireflyBuffer[id.x].pos += float3(FireflyBuffer[id.x].vel.xy, 0) * deltaTime;
    else if (p.x <= boundBox.x)
        FireflyBuffer[id.x].pos.x += velXZ.x;
    else if (p.x >= boundBox.y)      
        FireflyBuffer[id.x].pos.x -= velXZ.x;
    else if (p.y <= boundBox.z)      
        FireflyBuffer[id.x].pos.y += safeStep;
    else if (p.y >= boundBox.w)      
        FireflyBuffer[id.x].pos.y -= safeStep;*/
    //FireflyBuffer[id.x].pos += FireflyBuffer[id.x].vel;
}

// reset brightness
[numthreads(256, 1, 1)]
void SyncReset(uint id : SV_DispatchThreadID)
{
    FireflyBuffer[id.x].phase += Random(id.x + time, id.x + fmod(time * time, 10)) * 2;
}

// update brightness
[numthreads(256, 1, 1)]
void SyncUpdate(uint id : SV_DispatchThreadID)
{
    float theta = FireflyBuffer[id.x].phase;

    float sumX = 0, sumY = 0;
    int count = 0;
    for (uint i = 0; i < fireflyCount; i++)
    {
        float dist = distance(FireflyBuffer[id.x].pos, FireflyBuffer[i].pos);
        if (dist < couplingRange)
        {
            float t = FireflyBuffer[i].phase * 6.283185; // to radian 6.283185
            sumX += cos(t);
            sumY += sin(t);
            count++;
        }
    }
    // average theta
    sumX /= count;
    sumY /= count;
    float cphi = atan2(sumY, sumX) * (1 / 6.283185); // normalize radian
    float crad = sqrt(sumX * sumX + sumY * sumY);

    float speed = shineSpeed + shineRange * Random(id.x * 4 + time, fmod(id.x + time, 231));
    theta += deltaTime * (speed + coupling * crad * sin((cphi - theta) * 6.283185));
    theta = frac(theta);
    FireflyBuffer[id.x].phase = theta;
}